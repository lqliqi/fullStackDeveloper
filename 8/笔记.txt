base 64 编码方式

-----------------

decorator-------- 装饰者模式
对象生成之后，再给对象加东西
-----------------------------------------

websocket
1.双工
2.HTML5的
3.用的非常广

---------------------------------------

库：socket.io
socket.io 主要是跟node 配合使用，当然也可以和 php java 配合 ，和前台也可以用
安装方式：node 文件目录下  npm install socket.io

---------------------------------------

浏览器  ------ > 服务器   http/https

websocket 协议是基于http的
-------------------------------------------

sock.emit     发射
sock.on       接收

---------------------------------------------

webSocket ---- socket.io

1. 服务端
	a. 先有http服务
	let server = http.createServer();
	server.listen(8080);

	b. 再有个ws(webSocket)服务
	let wsServer = io.listen(server);
	wsServer.on('connect',function(){
		sock
	});
2. 浏览器端
	a. 引库
	<script src="xxx/socket.io/socket.io.js"></script>

	b.连接
	let sock = io.connect('ws://xxx');

---------------------------------------------

sock.emit('名字',参数....)
sock.on('名字',function(参数.....){});



---------------------------------------------

WebSocket : 数据交互
1.性能高
2.双向--- 数据实时性
3.HTML5 IE9+
4.socket.io

---------------------------------------------
socket.io
1.兼容多浏览器
2.能够传输二进制数据



socket.io
1.怎么用
2.聊天室
3.视频点播

Ajax跨域
jsonp

工具
---------------------------------------------


后台 node

1.原生node.js
2.node.js框架

---------------------------------------------


node.js : 用 javascript 写后台
1.性能高
2.跟前台配合方便
3.适合前端人员入门

---------------------------------------------

java       大型
Node.js    小型项目/工具----中间层语言

---------------------------------------------

协议：

listen:  等待客户端连接
端口：数字，区分不同的服务
	1.别人没用过
	2.linux- 1024以下端口不能用

每种服务一般都有默认的端口号
web           80
ssh           22
ftp           21
mysql         3306
....

---------------------------------------------

同步
异步

---------------------------------------------

服务端不是所有的文件都能让客户端操作

---------------------------------------------

Node.js
1. 工具 + 中间层
2. http、fs
	let server = http.createServer((req,res)=>{

	});
	server.listen(8080);

fs.readFile(path,(err,data)=>{

});

fs.writeFile(path,content,err=>{

});
---------------------------------------------

res.writeHeader();  ===>  header
res.write();        ===>  body

---------------------------------------------








