base 64 编码方式

-----------------

decorator-------- 装饰者模式
对象生成之后，再给对象加东西
-----------------------------------------

websocket
1.双工
2.HTML5的
3.用的非常广

---------------------------------------

库：socket.io
socket.io 主要是跟node 配合使用，当然也可以和 php java 配合 ，和前台也可以用
安装方式：node 文件目录下  npm install socket.io

---------------------------------------

浏览器  ------ > 服务器   http/https

websocket 协议是基于http的
-------------------------------------------

sock.emit     发射
sock.on       接收

---------------------------------------------

webSocket ---- socket.io

1. 服务端
	a. 先有http服务
	let server = http.createServer();
	server.listen(8080);

	b. 再有个ws(webSocket)服务
	let wsServer = io.listen(server);
	wsServer.on('connect',function(){
		sock
	});
2. 浏览器端
	a. 引库
	<script src="xxx/socket.io/socket.io.js"></script>

	b.连接
	let sock = io.connect('ws://xxx');

---------------------------------------------

sock.emit('名字',参数....)
sock.on('名字',function(参数.....){});



---------------------------------------------

WebSocket : 数据交互
1.性能高
2.双向--- 数据实时性
3.HTML5 IE9+
4.socket.io

---------------------------------------------
socket.io
1.兼容多浏览器
2.能够传输二进制数据



socket.io
1.怎么用
2.聊天室
3.视频点播

Ajax跨域
jsonp

工具
---------------------------------------------


后台 node

1.原生node.js
2.node.js框架

---------------------------------------------


node.js : 用 javascript 写后台
1.性能高
2.跟前台配合方便
3.适合前端人员入门

---------------------------------------------

java       大型
Node.js    小型项目/工具----中间层语言

---------------------------------------------

协议：

listen:  等待客户端连接
端口：数字，区分不同的服务
	1.别人没用过
	2.linux- 1024以下端口不能用

每种服务一般都有默认的端口号
web           80
ssh           22
ftp           21
mysql         3306
....

---------------------------------------------

同步
异步

---------------------------------------------

服务端不是所有的文件都能让客户端操作

---------------------------------------------

Node.js
1. 工具 + 中间层
2. http、fs
	let server = http.createServer((req,res)=>{

	});
	server.listen(8080);

fs.readFile(path,(err,data)=>{

});

fs.writeFile(path,content,err=>{

});
---------------------------------------------

res.writeHeader();  ===>  header
res.write();        ===>  body

---------------------------------------------

webSocket
1.原生挺麻烦
2.socket.io 兼容性好、易用
3.webSocket 天然跨域

---------------------------------------------

1.聊天室
2.视频点播---video

----------------------------------------------

聊天室
1.用户注册/登录
2.发言
3.离线消息

数据 ---> 数据库

1.用户数据
2.消息数据

-----------------------------------------------

数据库
1.关系型数据库  --  mysql、oracle
	优点：强大(9分)
	缺点：性能低(7分)
2.文件型数据库  --  SQLite
	优点：简单
	缺点：支持不了庞大应用、没法存储特别多的数据
3.文档性数据库 --- MogoDB
	优点：直接存储对象本身
	缺点：不够严谨、性能偏低(6.5)
4.空间型数据库 -- 坐标、位置

NoSQL：
性能(9)
Redis、memcached、bigtable、hypertable
hive

-----------------------------------------------

mysql


-----------------------------------------------
服务端：wamp、mysql
客户端：npm i mysql

---------------------------------------------

库----- 文件夹：管理用的，本身不能存数据
表----- 文件：存数据

	字段(列、域)
	行
---------------------------------------------
类型：
数字
		整数       tinyint (-128~127 或者 0~255),int(-21亿~21亿 或者 0~43亿)
		浮点数     float (小数点后8为) double(理论小数点后 308位)

字符串：
	小字符串     varchar(255)
	大字符串     text(2G)

主键(index+unique) :
1.唯一的
2.性能高

---------------------------------------------

数据库的语言：SQL
四大查询语句(CRUD)增删改查

---------------------------------------------

webSocket: 双向通信
	socket.io 兼容
node.js 服务器
数据库：MySQL
node操作数据库：
1.mysql模块
	mysql.createConnection
	mysql.createPool

2.SQL语言
	4大基本语句--- 增删改查
	增
		INSERT INTO 表名 (字段列表) VALUES(值)
		INSERT INTO user_table (username,password,online) VALUES('zhaoqi','777777',1);
	删
		DELETE FROM 表 WHERE 条件
		DELETE FROM user_table WHERE ID=8
	改
		UPDATE 表 SET 字段=新值,字段=新值，... WHERE 条件
		UPDATE user_table SET password='555555' WHERE ID=7
	查
		SELECT 字段列表 FROM 表 WHERE 条件
		SELECT username,online FROM user_table WHERE ID=1;

