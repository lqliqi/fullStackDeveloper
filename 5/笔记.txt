ES6: 变量，箭头、参数、map、reduce ,filter ,forEach


Promise.all([p1,p2,p3,...]).then()


generator

---------------------------------------------------------------------


generator --- 特殊的函数


普通函数  ----- 一直执行到头  飞机

generator 函数  ----  中间暂停  出租车


yield;

1.传值；
2.返回值

-------------------------------------------------

Promise 本质: 等待异步操作执行结束
generator 本质： 无感处理异步操作
async 本质： 官方runner

-------------------------------------------------

generator 和 async 更多的用在异步操作上

generator 需要一个 runner

runner(function *(){
	xxx

	let 结果1 = yield 异步操作1；

	xxx

	let 结果2 = yield 异步操作2；

});

async

(async =>(){
	xxx
	let 结果1 = await 异步操作1；

	xxx;

	let 结果2 = await 异步操作2;
})()


-----------------------------------------------------


模块  --- >  元件 --- > 组件
------------------------------------------------------

1. 民间的 sea.js require.js
	cmd (sea.js)    ,amd (require.js)?
2. node.js 模块化
3. es6 模块化
-------------------------------------------------------

模块
1.定义
2.调用

sea -------按需引用  解决依赖

-------------------------------------------
1. 定义模块
define(function(require, exports, module){
	exports.a = 12;
	exports.b = 5;
});

2. 引用模块
seajs.use(['xxx.js', 'xxx.js', ...], function(mod1,mod2,...){

});

------------------------------------------------------------

let a = 12;
let b = 5;

// 1. key 和 value 一样,简写

let json = {a, b};

// 2. 函数 es5 写法

{
	show: function(){
		.....
	},
	show2: function(){
		.....
	}
}

es6 写法

{
	show(){
		....
	},
	show2(){
		....
	}
}

-------------------------------------------------------------


es6 模块
1. 导出
export {x,x,x};

2. 引入
import mod from "./xxx.js";

---------------------------------------------
babel - es6

1. 安装babel-cli
// cli === command line interface

npm i -g babel-cli

---------------------------------------------------------


